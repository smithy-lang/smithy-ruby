# frozen_string_literal: true

# This is generated code!

module <%= namespace %>
  # Endpoint parameters used to influence endpoints per request.
  <%= documentation %>
  EndpointParameters = Struct.new(
    <%- parameters.each do |param| -%>
    :<%= param.name %>,
    <%- end -%>
    keyword_init: true
  ) do
    include Smithy::Client::Structure

    # @api private
    class << self
      PARAM_MAP = {
      <%- parameters.each do |param| -%>
        "<%= param.id %>" => :<%= param.name %>,
      <%- end -%>
      }.freeze
    end

    def initialize(options = {})
    <%- parameters.each do |param| -%>
      self[:<%= param.name %>] = options.fetch(:<%= param.name %>, <%= param.default_value %>)
    <%- end -%>
    <%- parameters.select(&:validate_required?).each do |param| -%>
      raise ArgumentError, "Missing required EndpointParameter: :<%= param.name %>" if <%= param.name %>.nil?
    <%- end -%>
    end

    def self.create(config, options={})
      new({
      <%- parameters.select(&:create_from_config?).each do |param| -%>
        <%= param.name %>: <%= param.value %>,
      <%- end -%>
      }.compact.merge(options))
    end

    # TODO: create per operation
  end
end

